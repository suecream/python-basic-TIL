# -*- coding: utf-8 -*-
"""오토인코더.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16doDW_67vA9NREWflABSSlOIfiuKFsrw
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x

import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np

pip install python-mnist

from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets('./data/mnist/', one_hot = True)

num_input = 28*28
num_hidden = 256

learning_rate = 0.01
training_epoch = 10
batch_size = 100

num_output_sample = 10

x_true = tf.placeholder(tf.float32, [None, num_input])

y_true = x_true

weight_encoder = tf.Variable(tf.truncated_normal([num_input, num_hidden]))
bias_encoder = tf.Variable(tf.truncated_normal([num_hidden]))

weight_decoder = tf.Variable(tf.truncated_normal([num_hidden, num_input]))
bias_decoder = tf.Variable(tf.truncated_normal([num_input]))

encoder = tf.nn.sigmoid(tf.add(tf.matmul(x_true, weight_encoder), bias_encoder))
decoder = tf.nn.sigmoid(tf.add(tf.matmul(encoder, weight_decoder), bias_decoder))

cost = tf.reduce_mean(tf.square(y_true - decoder))
optimizer = tf.train.AdamOptimizer(learning_rate)
optimizer = optimizer.minimize(cost)

sess = tf.Session()
sess.run(tf.global_variables_initializer())

total_batch = mnist.train.num_examples/batch_size # 550

for epoch in range(training_epoch) :
  total_cost = 0
  for i in range(int(total_batch)) :
    batch_xs, batch_ys = mnist.train.next_batch(batch_size)
    _, cost_value = sess.run([optimizer, cost], {x_true:batch_xs})
    total_cost += cost_value
  print("Epoch : {0}, Cost : {1}".format(epoch + 1, total_cost/total_batch))
print("최적화를 완료했습니다. ")

samples = sess.run(decoder, {x_true : mnist.test.images[:num_output_sample]})
fig, ax = plt.subplots(2, num_output_sample, figsize=(num_output_sample, 2))
for i in range(num_output_sample) :
  ax[0][i].set_axis_off
  ax[1][i].set_axis_off
  ax[0][i].imshow(np.reshape(mnist.test.images[i], (28,28)))
  ax[1][i].imshow(np.reshape(samples[i], (28,28)))
plt.show()