# -*- coding: utf-8 -*-
"""합성곱 신경망.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zgjF2i2ZDRxTRuOdvi452F9ptagxiasf
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x

pip install python_mnist

import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np

from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets("./data/mnist", one_hot = True)

x_true = tf.placeholder(tf.float32, [None, 28, 28, 1])
y_true = tf.placeholder(tf.float32, [None, 10])

weight_1 = tf.Variable(tf.truncated_normal([3,3,1,32], stddev=0.01))
hidden_1 = tf.nn.conv2d(x_true, weight_1, strides=[1,1,1,1], padding='SAME')
hidden_1 = tf.nn.relu(hidden_1)
hidden_1 = tf.nn.max_pool(hidden_1, ksize=[1,2,2,1], strides=[1,2,2,1], padding='SAME')
hidden_1 = tf.nn.dropout(hidden_1, keep_prob = 0.8)

weight_2 = tf.Variable(tf.truncated_normal([3,3,32,64], stddev=0.01))
hidden_2 = tf.nn.conv2d(hidden_1, weight_2, strides=[1,1,1,1], padding='SAME')
hidden_2 = tf.nn.relu(hidden_2)
hidden_2 = tf.nn.max_pool(hidden_2, ksize=[1,2,2,1], strides=[1,2,2,1], padding='SAME')

hidden_2 = tf.reshape(hidden_2, [-1, 7*7*64]) # -1은 나머지 전체를 의미
hidden_2 = tf.nn.dropout(hidden_2, keep_prob=0.8)

weight_3 = tf.Variable(tf.truncated_normal([7*7*64, 256], stddev=0.01))
fc_1 = tf.matmul(hidden_2, weight_3)
fc_1 = tf.nn.relu(fc_1)
fc_1 = tf.nn.dropout(fc_1, 0.5)

weight_4 = tf.Variable(tf.truncated_normal([256, 10], stddev=0.01))
y_pred = tf.matmul(fc_1, weight_4)

cost = tf.nn.softmax_cross_entropy_with_logits(logits=y_pred, labels=y_true)
cost = tf.reduce_mean(cost)
optimizer = tf.train.AdamOptimizer(learning_rate=0.01)
optimizer = optimizer.minimize(cost)

sess = tf.Session()
sess.run(tf.global_variables_initializer())

batch_size = 100
num_batch = int(mnist.train.num_examples/batch_size)

for epoch in range(10) : 
  total_cost = 0
  for i in range(num_batch) :
    batch_xs, batch_ys = mnist.train.next_batch(batch_size)
    batch_xs = batch_xs.reshape(-1, 28, 28,1) # reshape
    _, cost_value = sess.run([optimizer, cost], {x_true:batch_xs, y_true:batch_ys})
    total_cost += cost_value
  print("Epoch : {0}, Cost : {1}".format(epoch+1, total_cost/num_batch))
print("최적화를 완료했습니다. ")

correct_prediction = tf.equal(tf.argmax(y_pred, 1), tf.argmax(y_true, 1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
print("정확도 : {0}".format(sess.run(accuracy, {x_true:mnist.test.images.reshape(-1,28,28,1), y_true:mnist.test.labels})))