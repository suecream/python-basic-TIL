# -*- coding: utf-8 -*-
"""K-평균 알고리즘 클러스터

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l-nK7-GDxx-CkeXTm_63mI_u5riH3JJk
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

num_dots = 1000
num_cluster = 3
num_epochs = 100

dots = []
for i in range(num_dots) : 
  if np.random.random() > 0.66 :
    dots.append([np.random.normal(0.0, 1.0), np.random.normal(2.0, 0.5)])
  elif np.random.random() > 0.33 :
    dots.append([np.random.normal(2.0, 1.3), np.random.normal(-1.0, 0.6)])
  else : 
    dots.append([np.random.normal(-1.0, 0.8), np.random.normal(-2.0, 1.2)])

df = pd.DataFrame({"x" : [v[0] for v in dots], "y": [v[1] for v in dots]})

df.head(10)

sns.lmplot("x", "y", data=df, fit_reg=False, size=7)
plt.show()

vectors = tf.constant(dots)
vectors.get_shape()

centroids = tf.Variable(tf.slice(tf.random_shuffle(vectors), [0, 0], [num_cluster, -1]))
centroids.get_shape()

expanded_vectors = tf.expand_dims(vectors, 0)
expanded_centroids = tf.expand_dims(centroids, 1)

print(expanded_vectors.get_shape())
print(expanded_centroids.get_shape())

distances = tf.reduce_sum(tf.square(tf.subtract(expanded_vectors, expanded_centroids)), 2)
assignments = tf.argmin(distances, 0)
assignments.get_shape()

means = tf.concat([tf.reduce_mean(tf.gather(vectors, tf.reshape(tf.where(tf.equal(assignments,c)),[1,-1])), reduction_indices = [1]) for c in range(num_cluster)], 0)

centroids_updated = tf.assign(centroids, means)

with tf.Session() as sess :
  sess.run(tf.global_variables_initializer())
  for step in range(num_epochs) :
    _, centroid_values, assignment_values = sess.run([centroids_updated, centroids, assignments])
print("중심점")
print(centroid_values)

data = {"x" : [], "y" : [], "cluster" : []}
for i in range(len(assignment_values)) :
  data["x"].append(dots[i][0])
  data["y"].append(dots[i][1])
  data["cluster"].append(assignment_values[i])
df = pd.DataFrame(data)
sns.lmplot("x", "y", data=df, fit_reg=False, size =7, hue="cluster", legend=False)
plt.show()