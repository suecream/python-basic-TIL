# -*- coding: utf-8 -*-
"""텐서플로 선형회귀

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1joEbBc638ec95lkfDi9JqoVpv8_jkG3s
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x # 버전세팅

import tensorflow as tf # 텐서플로 설정
import numpy as np
import matplotlib.pyplot as plt

tf.__version__ # 버전 확인

learning_rate = 0.01
num_epochs = 1000
step_display = 50
# 하이퍼 파라미터 설정

x = [2.7, 4.8, 9.3, 13.4, 24.8, 31.3, 48.5, 53.0, 68.1, 74.2, 88.6, 94.5]
y = [7.0, 28.8, 22.8, 67.1, 48.8, 100.2, 140.0, 190.2, 215.2, 285.6, 260.3, 251.1]
# 변수 할당

assert len(x) == len(y) 
 len(x)
 # list길이 같은지 확인, list 길이 확인

weight = tf.Variable(tf.random_uniform([1], -1.0, 1.0), name = 'weight') # 가중치 설정
bias = tf.Variable(tf.random_uniform([1], -1.0, 1.0), name = 'bias') # 편향 설정

x_true = tf.placeholder(dtype = tf.float32, name = 'x_true') # 플레이스홀더 설정
y_true = tf.placeholder(dtype = tf.float32, name = 'y_true')

y_pred = tf.add(tf.multiply(weight, x_true), bias) # 예픅값 정의

cost = tf.reduce_mean(tf.square(y_pred - y_true)) # 비용 = 잔차^2

optimizer = tf.train.AdamOptimizer(learning_rate).minimize(cost) # 비용을 최소화하는 지점인 optimizer 정의

init = tf.global_variables_initializer()
sess = tf.Session()
sess.run(init)
# 세션 초기화 후 실행

for epoch in range(num_epochs) :
  _, c = sess.run([optimizer, cost], feed_dict = {x_true : x, y_true : y})
  if (epoch+1) % step_display == 0 :
    print("Epoch : {0}, cost : {1}, weight : {2}, bias : {3}".format(epoch+1, c, sess.run(weight), sess.run(bias)))
print("최적화 작업을 완료했습니다 .")

# 1000회 학습, 50회마다 결과값 출력

training_cost = sess.run(cost, feed_dict = {x_true : x, y_true : y})
print("최종 cost : {}".format(c))
print("최종 weight : {}".format(sess.run(weight)))
print("최종 bias : {}".format(sess.run(bias)))
# 최종 결과값 출력

plt.plot(x, y, 'ro', label = 'Original data')
plt.plot(x, sess.run(weight) * x + sess.run(bias), label = 'Optimized line')
plt.legend()
plt.show()

# 그래프로 표현

sess.close() # 세션 종료